import logging
import candy_def as c_d

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters

reply_keyboard = [['/play', '/info', '/close']]
stop_keyboard = [['/stop']]

markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
stop_markup = ReplyKeyboardMarkup(stop_keyboard, resize_keyboard=True, one_time_keyboard=False)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

TOKEN = '5557533810:AAGljPN-5omvkqL18kzN5CHyOjeCbf-64ns'

candy = 0
take_max = 0
def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç.\n–Ø –∑–Ω–∞—é –∏–≥—Ä—É: –∫—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑—å–º—ë—Ç –∫–æ–Ω—Ñ–µ—Ç—ã!\n–î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å!",
        reply_markup=markup
    )

def play(update, context):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤ –∏–≥—Ä–µ (–Ω–µ –º–µ–Ω—å—à–µ 10)', reply_markup=stop_markup)
    return 1
    
def play_candy(update, context):
    global candy
    num = c_d.chek_candy(update.message.text, 10)
    if num:
        candy = num
    else:
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤ –∏–≥—Ä–µ (–Ω–µ –º–µ–Ω—å—à–µ 10)')
        return 1
    update.message.reply_text('–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω—Ñ–µ—Ç –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥? (–Ω–µ –º–µ–Ω—å—à–µ 3)')
    return 2

def play_candy_take(update, context):
    global candy
    global take_max
    num = c_d.chek_candy(update.message.text, 3)
    if num:
        take_max = num
    else:
        update.message.reply_text('–°–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º –∫–æ–Ω—Ñ–µ—Ç –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞ 1 —Ö–æ–¥? (–Ω–µ –º–µ–Ω—å—à–µ 3)')
        return 2
    update.message.reply_text(f'–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç {candy} –∫–æ–Ω—Ñ–µ—Ç–∞.\n –ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ {take_max} –∫–æ–Ω—Ñ–µ—Ç.\n –í—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–≤—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥.\n–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤—ã –≤–æ–∑—å–º–µ—Ç–µ?')
    return 3

def game_candy(update, context):
    global candy
    global take_max
    num = c_d.chek_nums(update.message.text, candy, take_max)
    if num:
        candy -= num
        update.message.reply_text(f'–ö–æ–Ω—Ñ–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: {candy}')
        if candy == 0:
            update.message.reply_text(f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ü•≥', reply_markup=markup)
            context.bot.send_document(chat_id=update.effective_chat.id, document='https://tenor.com/view/panda-mini-panda-gif-25524945')
            return ConversationHandler.END
        else:
            num = c_d.howmuch(candy, take_max)
            candy -= num
            update.message.reply_text(f'–ë–æ—Ç –≤–∑—è–ª {num} –∏ –∫–æ–Ω—Ñ–µ—Ç –æ—Å—Ç–∞–ª–æ—Å—å: {candy}')
            if candy == 0:
                update.message.reply_text(f'–ü–æ–±–µ–¥–∏–ª –±–æ—Ç üíî', reply_markup=markup)
                context.bot.send_document(chat_id=update.effective_chat.id, document='https://i.gifer.com/IN3.gif')
                return ConversationHandler.END
            else:
                update.message.reply_text('–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤—ã –≤–æ–∑—å–º–µ—Ç–µ?')
                return 3
    else:
        update.message.reply_text(f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        \n–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ,
        \n–Ω–µ –±–æ–ª—å—à–µ {take_max}
        \n–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–Ω—Ñ–µ—Ç ({candy})
        \n–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤—ã –≤–æ–∑—å–º–µ—Ç–µ?''')
        return 3

def stop(update, context):
    update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=markup)
    return ConversationHandler.END

def info(update, context):
    update.message.reply_text(
        "–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç\n\n–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º n –∫–æ–Ω—Ñ–µ—Ç.\n\n–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ 1 —Ä–∞–∑ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã.\n\n–ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥.")

def close(update, context):
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!",
    reply_markup=ReplyKeyboardRemove())


play_handler = ConversationHandler(
        entry_points=[CommandHandler('play', play)],

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        states={
            1: [MessageHandler(Filters.text & ~Filters.command, play_candy)],
            2: [MessageHandler(Filters.text & ~Filters.command, play_candy_take)],
            3: [MessageHandler(Filters.text & ~Filters.command, game_candy)],
        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop)]
    )


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    dp.add_handler(play_handler)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("info", info))
    dp.add_handler(CommandHandler("close", close))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()